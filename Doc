使用框架时，请先联系本人。谢谢。
使用须知：

基础战斗系统(未完。。40%。伤害判定准备改为lua脚本，因为扩展性强)
 (1) 战斗系统如果使用CharacterCtrlBase 必需使用以下组件 PlayerMaker状态机 控制动作播放，CharacterController必需要带,Animator控制器一定要带
 (2) 战斗系统需建立在新版动画体系上，目前老版动画不支持
 (3) CharacterCtrlBase 角色控制组件中提供了生命周期如下，请不要使用Unity自己的生命周期
     1.OnAwake
     2.OnStart
     3.OnUpdate
     4.OnFixedUpdate
     5.OnLateUpdate
 (4) 动画和逻辑变成实时绑定，
     1.动画跳跃逻辑请在PlayMaker中创建
     2.每个动画执行的绑定逻辑请在LUA脚本中实现(注意lua脚本名字要和状态机名字对应以lua.txt结尾)
     3.每个动画的伤害判定以及动画播放功能已经移植至SkillChain表中，请详细阅读SkillChain表的语法

状态机流程控制系统FSM(主要组件 StateController,FSMMgr)：
 使用lua脚本与playmaker之间建立关系，先使用playmaker创建可视化状态机，然后针对每个状态机去编写对应的lua脚本即可。
 StateController 为状态机系统的核心组件请继承这个组件来编写对应逻辑
 (1) 系统内置状态机组件属性为playerFsm，如果要操控逻辑状态机，请调用此变量，lua中调用此变量请使用self.playerFsm
 (2) 系统连接Playmaker状态机框架属性为fsm，如果要操控可视化状态机，请调用此变量,lua中调用此变量请使用self.fsm
 (3) 状态机lua脚本请遵循语法，提供以下生命周期使用:
     这是内部绑定的功能，当然如果你想自定义添加新的生命周期，请在FSMBase中添加新的委托,并在StateController提供接口中调用自定义事件
        OnEnter
        OnUpdate
        OnExit
        OnFixedUpdate
        OnLatedUpdate
        OnTriggerEnter
        OnTriggerStay
        OnTriggerExit
        OnCollisionEnter
        OnCollisionStay
        OnCollisionExit
        OnBecameInvisible
        OnBecameVisible
        OnTransformChildrenChanged
        OnTransformParentChanged
        OnApplicationPause
        OnDestroy
        OnEnable
        OnDisable

轻量级UI框架MUI(主要组件 MUIManager,MUIBase,IWindowAnimation,IWindowController):
(1) 内置自制MUI框架，简单操控UI显示逻辑
    提供以下功能：
    1.自动黑色背景功能
    2.遮罩穿透功能
    3.UI层级栈管理逻辑
    4.动态加载UI功能（通过资源加载器加载资源，如果有AB包优先加载AB包中的资源)
    5.开启关闭功能
    6.动画功能
    7.统一弹栈功能
    8.层级自动变更功能
    请在逻辑中直接调用MUIManager.Instance下的功能

消息中心机制MessageCenter：
(1) 内置消息中心机制，实现了订阅者模式
(2) 提供广播机制
(3) 提供指定消息推送机制
(4) 提供消息注册
(5) 提供消息查询
(6) 提供消息删除

资源加载管理器ResourceMgr
(1) 针对Unity资源加载进行了二次封装
(2) 实现了AB包资源下载，读取等功能
(3) 加载资源请使用Load 或者 Load<T>方法 传入资源文件路径
(4) 资源优先读取AB包，如果AB包不存在，则读取本地
(5) 资源加载流程的实现
(6) 提供批量处理资源包名工具
Tips：请把资源统统放入Mill/Assets/文件夹下

配置表创建以及读取功能ConfigInfo
(1)读取配置表信息用于数据扩展
(2)提供EXCEL转Json的工具

第三方插件继承：
(1)Tween动画
(2)LitJson
(3)Xlua
(4)PlayerMaker